//
//  NoteDetailsInteractorTests.swift
//  NoteApp
//
//  Created by asbul on 27.06.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import NoteApp
import XCTest

class NoteDetailsInteractorTests: XCTestCase {

    // MARK: Subject under test

    private var sut: NoteDetailsInteractor!
    private var presenter: NoteDetailsPresentationLogicSpy!
    private var worker: NoteDetailsWorkerSpy!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()

        let noteDetailsInteractor = NoteDetailsInteractor()
        let noteDetailsPresenter = NoteDetailsPresentationLogicSpy()
        let noteDetailsWorker = NoteDetailsWorkerSpy()

        noteDetailsInteractor.worker = noteDetailsWorker
        noteDetailsInteractor.presenter = noteDetailsPresenter

        sut = noteDetailsInteractor
        presenter = noteDetailsPresenter
        worker = noteDetailsWorker
    }

    override func tearDown() {
        sut = nil
        presenter = nil
        worker = nil
        super.tearDown()
    }

    // MARK: Tests
    func testProvideNoteDetails() {
        sut.provideNoteDetails(request: .provideNoteDetails)

        XCTAssertTrue(presenter.isCalledPresentNote, "Not started presenter.presentNote()")
    }

    func testSaveChangesToExistingNote() {
        // Given
        let mockNote = Note(
            header: "Header",
            text: "Text",
            date: .now,
            userShareIcon: nil
        )

        // When
        sut.note = mockNote
        sut.provideNoteDetails(request: .saveNote(
            noteHeader: "ChangedMockNoteHeader",
            noteText: "ChangedMockNoteText",
            noteDate: .now)
        )

        // Then
        XCTAssertTrue(sut.isEditingNote, "IsEditeNote should be true, mockNote is exist")
        XCTAssert(sut.note?.header == "ChangedMockNoteHeader", "saveNote(:) must change header of the existing note")
        XCTAssertTrue(presenter.isCalledPresentNote, "Not started presenter.presentNotes()")
    }

    func testSaveNote() {
        sut.provideNoteDetails(request: .saveNote(
            noteHeader: "MockNewNoteHeader",
            noteText: "MockNewNoteText",
            noteDate: .now)
        )

        XCTAssertTrue(sut.note != nil, ".saveNote(:) should create NewNote")
        XCTAssertTrue(presenter.isCalledPresentNote, "Not started presenter.presentNotes()")
    }

    func testSaveEditingNoteForPassing() {
        // Given
        let mockNote = Note(
            header: "Header",
            text: "Text",
            date: .now,
            userShareIcon: nil
        )

        // When
        sut.note = mockNote
        sut.provideNoteDetails(request: .saveNoteForPassing(
            noteHeader: "ChangedMockNoteHeader",
            noteText: "ChangegMockNoteText",
            noteDate: .now)
        )

        // Then
        XCTAssertTrue(sut.isEditingNote, "IsEditeNote should be true, mockNote is exist")
        XCTAssert(sut.note?.header == "ChangedMockNoteHeader", "saveNoteForPassing(:) must change header of the existing note")
        XCTAssertTrue(worker.isCalledSaveNote, "Not started worker.saveNote(:)")
    }

    func testSaveNoteForPassing() {
        sut.provideNoteDetails(request: .saveNoteForPassing(
            noteHeader: "MockNewNoteHeader",
            noteText: "MockNewNoteText",
            noteDate: .now)
        )

        XCTAssertFalse(sut.isEditingNote, "isEditNote should be false because we create newNote before passing")
        XCTAssertTrue(worker.isCalledSaveNote, "Not started worker.saveNote(:)")
    }
}
