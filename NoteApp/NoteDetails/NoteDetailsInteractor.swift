//
//  NoteDetailsInteractor.swift
//  NoteApp
//
//  Created by asbul on 06.06.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol NoteDetailsBusinessLogic {
    func provideNoteDetails()
    func updateCreateNote(request: NoteDetails.CheckNoteIsEmpty.Request)
    func saveNoteBeforePassing(request: NoteDetails.PassNote.Request)
}

protocol NoteDetailsDataStore {
    var note: Note? { get set }
    var isEditingNote: Bool { get }
}

class NoteDetailsInteractor: NoteDetailsBusinessLogic, NoteDetailsDataStore {
    var presenter: NoteDetailsPresentationLogic?
    var worker: NoteDetailsWorker?

    var note: Note?
    lazy var isEditingNote: Bool = (note != nil) ? true : false

    func provideNoteDetails() {
        let response = NoteDetails.ShowNoteDetails.Response(
            noteHeader: note?.header,
            noteText: note?.text,
            noteDate: note?.date
        )
        presenter?.presentNoteDetails(response: response)
    }

    func updateCreateNote(request: NoteDetails.CheckNoteIsEmpty.Request) {
        if isEditingNote {
            note?.header = request.noteHeader
            note?.text = request.noteText
            note?.date = request.noteDate
        } else {
            note = Note(
                header: request.noteHeader,
                text: request.noteText,
                date: request.noteDate,
                userShareIcon: nil
            )
        }
        guard let note = note else { return }
                let response = NoteDetails.CheckNoteIsEmpty.Response(isEmptyNote: note.isEmpty)
                presenter?.showAlert(response: response)
    }

    func saveNoteBeforePassing(request: NoteDetails.PassNote.Request) {
        if isEditingNote {
            note?.header = request.noteHeader
            note?.text = request.noteText
            note?.date = request.noteDate
        } else {
            note = Note(
                header: request.noteHeader,
                text: request.noteText,
                date: request.noteDate,
                userShareIcon: nil
            )
        }
        guard let note = note, !note.isEmpty else { return }
        worker?.save(note: note)
        let response = NoteDetails.PassNote.Response(note: note)
        presenter?.passNote(response: response)
    }
}
